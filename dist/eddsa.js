"use strict";
/* modified from circomlib/src/eddsa.js */
Object.defineProperty(exports, "__esModule", { value: true });
exports.pruneBuffer = exports.unpackSignature = exports.packSignature = exports.verifyWithHasher = exports.signWithHasher = exports.prv2pub = exports.prv2bigint = void 0;
const createBlakeHash = require("blake-hash");
const ffjs_1 = require("./ffjs");
const circomlib_1 = require("circomlib");
function pruneBuffer(_buff) {
    const buff = Buffer.from(_buff);
    buff[0] = buff[0] & 0xf8;
    buff[31] = buff[31] & 0x7f;
    buff[31] = buff[31] | 0x40;
    return buff;
}
exports.pruneBuffer = pruneBuffer;
function prv2bigint(prv) {
    const sBuff = pruneBuffer(createBlakeHash('blake512').update(prv).digest().slice(0, 32));
    let s = ffjs_1.ffutils.leBuff2int(sBuff);
    return ffjs_1.Scalar.shr(s, 3);
}
exports.prv2bigint = prv2bigint;
function prv2pub(prv) {
    const A = circomlib_1.babyJub.mulPointEscalar(circomlib_1.babyJub.Base8, prv2bigint(prv));
    return A;
}
exports.prv2pub = prv2pub;
function signWithHasher(prv, msg, hasher) {
    const h1 = createBlakeHash('blake512').update(prv).digest();
    const sBuff = pruneBuffer(h1.slice(0, 32));
    const s = ffjs_1.ffutils.leBuff2int(sBuff);
    const A = circomlib_1.babyJub.mulPointEscalar(circomlib_1.babyJub.Base8, ffjs_1.Scalar.shr(s, 3));
    const msgBuff = ffjs_1.ffutils.leInt2Buff(msg, 32);
    const rBuff = createBlakeHash('blake512')
        .update(Buffer.concat([h1.slice(32, 64), msgBuff]))
        .digest();
    let r = ffjs_1.ffutils.leBuff2int(rBuff);
    const Fr = new ffjs_1.F1Field(circomlib_1.babyJub.subOrder);
    r = Fr.e(r);
    const R8 = circomlib_1.babyJub.mulPointEscalar(circomlib_1.babyJub.Base8, r);
    const hm = hasher([R8[0], R8[1], A[0], A[1], msg]);
    const S = Fr.add(r, Fr.mul(hm, s));
    return {
        R8: R8,
        S: S,
    };
}
exports.signWithHasher = signWithHasher;
function verifyWithHasher(msg, sig, A, hasher) {
    // Check parameters
    if (typeof sig != 'object')
        return false;
    if (!Array.isArray(sig.R8))
        return false;
    if (sig.R8.length != 2)
        return false;
    if (!circomlib_1.babyJub.inCurve(sig.R8))
        return false;
    if (!Array.isArray(A))
        return false;
    if (A.length != 2)
        return false;
    if (!circomlib_1.babyJub.inCurve(A))
        return false;
    if (sig.S >= circomlib_1.babyJub.subOrder)
        return false;
    const hm = hasher([sig.R8[0], sig.R8[1], A[0], A[1], msg]);
    const Pleft = circomlib_1.babyJub.mulPointEscalar(circomlib_1.babyJub.Base8, sig.S);
    let Pright = circomlib_1.babyJub.mulPointEscalar(A, ffjs_1.Scalar.mul(hm, 8));
    Pright = circomlib_1.babyJub.addPoint(sig.R8, Pright);
    if (!circomlib_1.babyJub.F.eq(Pleft[0], Pright[0]))
        return false;
    if (!circomlib_1.babyJub.F.eq(Pleft[1], Pright[1]))
        return false;
    return true;
}
exports.verifyWithHasher = verifyWithHasher;
function packSignature(sig) {
    const R8p = circomlib_1.babyJub.packPoint(sig.R8);
    const Sp = ffjs_1.ffutils.leInt2Buff(sig.S, 32);
    return Buffer.concat([R8p, Sp]);
}
exports.packSignature = packSignature;
function unpackSignature(sigBuff) {
    return {
        R8: circomlib_1.babyJub.unpackPoint(sigBuff.slice(0, 32)),
        S: ffjs_1.ffutils.leBuff2int(sigBuff.slice(32, 64)),
    };
}
exports.unpackSignature = unpackSignature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRkc2EuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZWRkc2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUEwQzs7O0FBRTFDLDhDQUE4QztBQUM5QyxpQ0FBa0Q7QUFDbEQseUNBQThDO0FBRTlDLFNBQVMsV0FBVyxDQUFDLEtBQUs7SUFDeEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUMzQixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUMzQixPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFzRStGLGtDQUFXO0FBcEUzRyxTQUFTLFVBQVUsQ0FBQyxHQUFHO0lBQ3JCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RixJQUFJLENBQUMsR0FBRyxjQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQWdFUSxnQ0FBVTtBQTlEbkIsU0FBUyxPQUFPLENBQUMsR0FBRztJQUNsQixNQUFNLENBQUMsR0FBRyxtQkFBTyxDQUFDLGVBQWUsQ0FBQyxtQkFBTyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNs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