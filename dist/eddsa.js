"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prv2bigint = prv2bigint;
exports.prv2pub = prv2pub;
exports.signWithHasher = signWithHasher;
exports.verifyWithHasher = verifyWithHasher;
exports.packSignature = packSignature;
exports.unpackSignature = unpackSignature;
exports.pruneBuffer = pruneBuffer;

var _blakeHash = _interopRequireDefault(require("blake-hash"));

var _ffjs = require("./ffjs");

var _circomlib = require("circomlib");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function pruneBuffer(_buff) {
  var buff = Buffer.from(_buff);
  buff[0] = buff[0] & 0xf8;
  buff[31] = buff[31] & 0x7f;
  buff[31] = buff[31] | 0x40;
  return buff;
}

function prv2bigint(prv) {
  var sBuff = pruneBuffer((0, _blakeHash["default"])('blake512').update(prv).digest().slice(0, 32));

  var s = _ffjs.ffutils.leBuff2int(sBuff);

  return _ffjs.Scalar.shr(s, 3);
}

function prv2pub(prv) {
  var A = _circomlib.babyJub.mulPointEscalar(_circomlib.babyJub.Base8, prv2bigint(prv));

  return A;
}

function signWithHasher(prv, msg, hasher) {
  var h1 = (0, _blakeHash["default"])('blake512').update(prv).digest();
  var sBuff = pruneBuffer(h1.slice(0, 32));

  var s = _ffjs.ffutils.leBuff2int(sBuff);

  var A = _circomlib.babyJub.mulPointEscalar(_circomlib.babyJub.Base8, _ffjs.Scalar.shr(s, 3));

  var msgBuff = _ffjs.ffutils.leInt2Buff(msg, 32);

  var rBuff = (0, _blakeHash["default"])('blake512').update(Buffer.concat([h1.slice(32, 64), msgBuff])).digest();

  var r = _ffjs.ffutils.leBuff2int(rBuff);

  var Fr = new _ffjs.F1Field(_circomlib.babyJub.subOrder);
  r = Fr.e(r);

  var R8 = _circomlib.babyJub.mulPointEscalar(_circomlib.babyJub.Base8, r);

  var hm = hasher([R8[0], R8[1], A[0], A[1], msg]);
  var S = Fr.add(r, Fr.mul(hm, s));
  return {
    R8: R8,
    S: S
  };
}

function verifyWithHasher(msg, sig, A, hasher) {
  // Check parameters
  if (_typeof(sig) != 'object') return false;
  if (!Array.isArray(sig.R8)) return false;
  if (sig.R8.length != 2) return false;
  if (!_circomlib.babyJub.inCurve(sig.R8)) return false;
  if (!Array.isArray(A)) return false;
  if (A.length != 2) return false;
  if (!_circomlib.babyJub.inCurve(A)) return false;
  if (sig.S >= _circomlib.babyJub.subOrder) return false;
  var hm = hasher([sig.R8[0], sig.R8[1], A[0], A[1], msg]);

  var Pleft = _circomlib.babyJub.mulPointEscalar(_circomlib.babyJub.Base8, sig.S);

  var Pright = _circomlib.babyJub.mulPointEscalar(A, _ffjs.Scalar.mul(hm, 8));

  Pright = _circomlib.babyJub.addPoint(sig.R8, Pright);
  if (!_circomlib.babyJub.F.eq(Pleft[0], Pright[0])) return false;
  if (!_circomlib.babyJub.F.eq(Pleft[1], Pright[1])) return false;
  return true;
}

function packSignature(sig) {
  var R8p = _circomlib.babyJub.packPoint(sig.R8);

  var Sp = _ffjs.ffutils.leInt2Buff(sig.S, 32);

  return Buffer.concat([R8p, Sp]);
}

function unpackSignature(sigBuff) {
  return {
    R8: _circomlib.babyJub.unpackPoint(sigBuff.slice(0, 32)),
    S: _ffjs.ffutils.leBuff2int(sigBuff.slice(32, 64))
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,