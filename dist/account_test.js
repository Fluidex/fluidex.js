"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers = require("ethers");
const assert = require("assert");
const eddsa = require("./eddsa");
const hash_1 = require("./hash");
const babyJub = require('circomlib').babyJub;
const keccak256 = require('js-sha3').keccak256;
const account_1 = require("./account");
async function TestRecoverPublicKeyAndAddress() {
    const MNEMONIC = 'radar blur cabbage chef fix engine embark joy scheme fiction master release';
    const wallet = ethers.Wallet.fromMnemonic(MNEMONIC, null);
    const message = account_1.get_CREATE_L2_ACCOUNT_MSG(null);
    const expectedAddress = await wallet.getAddress();
    const expectedPublicKey = wallet._signingKey().publicKey;
    const signature = await wallet.signMessage(message);
    // console.log("Address:", expectedAddress);
    // console.log("PublicKey:", expectedPublicKey);
    // console.log("Message:", message);
    // console.log("Signature:", signature);
    const pk = account_1.recoverPublicKeyFromSignature(message, signature);
    assert(pk == expectedPublicKey, 'PublicKey mismatch');
    const addr = ethers.utils.computeAddress(pk);
    assert(addr == expectedAddress, 'Address mismatch');
}
const privKey = '0x0b22f852cd07386bce533f2038821fdcebd9c5ced9e3cd51e3a05d421dbfd785';
function testL2Sign() {
    const acc = account_1.Account.fromPrivkey(privKey);
    // 0x7b70843a42114e88149e3961495c03f9a41292c8b97bd1e2026597d185478293
    console.log(acc.bjjPubKey);
}
async function ethersSign() {
    let signer = new ethers.Wallet(privKey);
    const message = account_1.get_CREATE_L2_ACCOUNT_MSG(null);
    const signature = await signer.signMessage(message);
    // 0x9982364bf709fecdf830a71f417182e3a7f717a6363180ff33784e2823935f8b55932a5353fb128fc7e3d6c4aed57138adce772ce594338a8f4985d6668627b31c
    console.log(signature);
    const acc = account_1.Account.fromSignature(signature);
    // 0x7b70843a42114e88149e3961495c03f9a41292c8b97bd1e2026597d185478293
    console.log(acc.bjjPubKey);
}
function TestL2AccountKeyAndSign() {
    /*
    const wallet = ethers.Wallet.createRandom();
    const msgHash = ethers.utils.hashMessage(get_CREATE_L2_ACCOUNT_MSG(null));
    const signature = ethers.utils.joinSignature(wallet._signingKey().signDigest(msgHash));
    const seed = ethers.utils.arrayify(signature).slice(0, 32);
    */
    const seed = ethers.utils.arrayify('0x87b34b2b842db0cc945659366068053f325ff227fd9c6788b2504ac2c4c5dc2a');
    const account = new account_1.L2Account(seed);
    assert(account.bjjPubKey == '0xa59226beb68d565521497d38e37f7d09c9d4e97ac1ebc94fba5de524cb1ca4a0');
    assert(account.ax.toString(16) == '1fce25ec2e7eeec94079ec7866a933a8b21f33e0ebd575f3001d62d19251d455');
    assert(account.ay.toString(16) == '20a41ccb24e55dba4fc9ebc17ae9d4c9097d7fe3387d492155568db6be2692a5');
    assert(account.sign.toString(16) == '1');
    const sig = account.signHash(1357924680n);
    assert(sig.R8x.toString(10) == '15679698175365968671287592821268512384454163537665670071564984871581219397966');
    assert(sig.R8y.toString(10) == '1705544521394286010135369499330220710333064238375605681220284175409544486013');
    assert(sig.S.toString(10) == '2104729104368328243963691045555606467740179640947024714099030450797354625308');
    const packedSig = account.signHashPacked(1357924680n);
    assert(
    // @ts-ignore
    packedSig.toString('hex') ==
        '7ddc5c6aadf5e80200bd9f28e9d5bf932cbb7f4224cce0fa11154f4ad24dc5831c295fb522b7b8b4921e271bc6b265f4d7114fbe9516d23e69760065053ca704');
    //console.log(packedSig.toString('hex'));
    //console.log(eddsa.unpackSignature(packedSig));
}
function TestL2SigVerify() {
    // copied from TestL2AccountKeyAndSign
    const pubkey = 'a59226beb68d565521497d38e37f7d09c9d4e97ac1ebc94fba5de524cb1ca4a0';
    const msg = 1357924680n;
    const sig = '7ddc5c6aadf5e80200bd9f28e9d5bf932cbb7f4224cce0fa11154f4ad24dc5831c295fb522b7b8b4921e271bc6b265f4d7114fbe9516d23e69760065053ca704';
    const pubkeyPoint = babyJub.unpackPoint(Buffer.from(pubkey, 'hex'));
    assert(eddsa.verifyWithHasher(msg, eddsa.unpackSignature(Buffer.from(sig, 'hex')), pubkeyPoint, hash_1.hash));
}
async function main() {
    await TestL2SigVerify();
    await TestL2AccountKeyAndSign();
    await TestRecoverPublicKeyAndAddress();
    await ethersSign();
    await testL2Sign();
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FjY291bnRfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLGlDQUE4QjtBQUM5QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzdDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDL0MsdUNBQXlHO0FBRXpHLEtBQUssVUFBVSw4QkFBOEI7SUFDM0MsTUFBTSxRQUFRLEdBQUcsNkVBQTZFLENBQUM7SUFDL0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELE1BQU0sT0FBTyxHQUFHLG1DQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2xELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUN6RCxNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFcEQsNENBQTRDO0lBQzVDLGdEQUFnRDtJQUNoRCxvQ0FBb0M7SUFDcEMsd0NBQXdDO0lBRXhDLE1BQU0sRUFBRSxHQUFHLHVDQUE2QixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RCxNQUFNLENBQUMsRUFBRSxJQUFJLGlCQUFpQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDdEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0MsTUFBTSxDQUFDLElBQUksSUFBSSxl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